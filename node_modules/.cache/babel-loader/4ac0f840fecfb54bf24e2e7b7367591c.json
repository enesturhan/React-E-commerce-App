{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TULPAR\\\\Desktop\\\\sa\\\\src\\\\guards\\\\role.guard.js\",\n    _s = $RefreshSig$();\n\nimport { Navigate, useLocation } from 'react-router';\nimport { AuthService } from '../services/auth.service'; //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RoleGuard = _ref => {\n  _s();\n\n  let {\n    children,\n    roles\n  } = _ref;\n  console.log('roles', roles);\n  const roleExist = AuthService.IsInRole(roles);\n  let location = useLocation();\n  console.log('location', location);\n\n  if (!roleExist) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }, this);\n  }\n\n  return children;\n};\n\n_s(RoleGuard, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = RoleGuard;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoleGuard\");","map":{"version":3,"sources":["C:/Users/TULPAR/Desktop/sa/src/guards/role.guard.js"],"names":["Navigate","useLocation","AuthService","RoleGuard","children","roles","console","log","roleExist","IsInRole","location","from"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AACA,SAASC,WAAT,QAA4B,0BAA5B,C,CAEA;;;AACA,OAAO,MAAMC,SAAS,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAwB;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AAEA,QAAMG,SAAS,GAAGN,WAAW,CAACO,QAAZ,CAAqBJ,KAArB,CAAlB;AACA,MAAIK,QAAQ,GAAGT,WAAW,EAA1B;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBG,QAAxB;;AAEA,MAAI,CAACF,SAAL,EAAgB;AACf,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC,eAAb;AAA6B,MAAA,KAAK,EAAE;AAAEG,QAAAA,IAAI,EAAED;AAAR,OAApC;AAAwD,MAAA,OAAO;AAA/D;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,SAAON,QAAP;AACA,CAbM;;GAAMD,S;UAIGF,W;;;KAJHE,S","sourcesContent":["import { Navigate, useLocation } from 'react-router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n//\r\nexport const RoleGuard = ({ children, roles }) => {\r\n\tconsole.log('roles', roles);\r\n\r\n\tconst roleExist = AuthService.IsInRole(roles);\r\n\tlet location = useLocation();\r\n\r\n\tconsole.log('location', location);\r\n\r\n\tif (!roleExist) {\r\n\t\treturn <Navigate to=\"/unauthorized\" state={{ from: location }} replace />;\r\n\t}\r\n\r\n\treturn children;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}