{"ast":null,"code":"import { BaseHttpService } from \"./base.httpservice\";\nimport { TokenService } from \"./token.service\";\nexport const AuthService = {};\n\nAuthService.isAuthenticated = () => {\n  return localStorage.getItem(\"access_token\") ? true : false;\n}; // Kullanıcının böyle bir rolü var mı yok mu kontrolü yaptık\n\n\nAuthService.IsInRole = roleNames => {\n  const accessToken = localStorage.getItem(\"access_token\");\n  console.log(\"roleNames\", roleNames); // sample roles ['admin','manager']\n  // accesstokendan role bilgisini çektik\n\n  var decodedToken = TokenService.DecodeAccessToken(accessToken); // accessToken'dan decode edilen role\n\n  const userRoles = decodedToken.role.split(\",\");\n  console.log(\"userRoles\", userRoles);\n  let result = false;\n\n  for (const roleName of roleNames) {\n    if (userRoles.includes(roleName)) {\n      result = true;\n      break;\n    }\n  }\n\n  console.log(\"result\", result);\n  return result;\n};\n\nAuthService.UserName = () => localStorage.getItem(\"username\");\n\nAuthService.login = async (_ref, callback) => {\n  let {\n    username,\n    password\n  } = _ref;\n  const param = {\n    username,\n    password,\n    grantType: \"password\"\n  };\n\n  try {\n    let response = await BaseHttpService.post(\"https://localhost:44381/api/tokens\", param);\n    console.log(\"response324234\", response);\n\n    if (response.status == 200) {\n      const tokenResponse = {\n        accessToken: response.data.accessToken,\n        refreshToken: response.data.refreshToken\n      }; // decode işlemi ve localStorage Set işlemleri yaparız\n\n      TokenService.setToken(tokenResponse);\n      callback({\n        url: \"/\"\n      }, null);\n    } else if (response.status == 401) {\n      callback(null, {\n        message: \"Kullanıcı adı veya parola hatalı\"\n      });\n    }\n  } catch (error) {\n    callback(null, {\n      message: \"Sunucuda bir hata oluştu\"\n    });\n    console.log(\"login Error\", error);\n  }\n}; // js tarafında apiden herhangi bir işlem yapmadığımız için sadece tokenları sildiğimiz için senkron tanımladık.\n\n\nAuthService.logout = callback => {\n  TokenService.clearToken(); // token sil\n\n  callback({\n    url: \"/login\"\n  }); // login sayfasına yönlendir\n};","map":{"version":3,"sources":["C:/Users/TULPAR/Desktop/sa/src/services/auth.service.js"],"names":["BaseHttpService","TokenService","AuthService","isAuthenticated","localStorage","getItem","IsInRole","roleNames","accessToken","console","log","decodedToken","DecodeAccessToken","userRoles","role","split","result","roleName","includes","UserName","login","callback","username","password","param","grantType","response","post","status","tokenResponse","data","refreshToken","setToken","url","message","error","logout","clearToken"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,MAAMC,WAAW,GAAG,EAApB;;AAEPA,WAAW,CAACC,eAAZ,GAA8B,MAAM;AAClC,SAAOC,YAAY,CAACC,OAAb,CAAqB,cAArB,IAAuC,IAAvC,GAA8C,KAArD;AACD,CAFD,C,CAIA;;;AACAH,WAAW,CAACI,QAAZ,GAAwBC,SAAD,IAAe;AACpC,QAAMC,WAAW,GAAGJ,YAAY,CAACC,OAAb,CAAqB,cAArB,CAApB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,SAAzB,EAHoC,CAKpC;AACA;;AACA,MAAII,YAAY,GAAGV,YAAY,CAACW,iBAAb,CAA+BJ,WAA/B,CAAnB,CAPoC,CAQpC;;AACA,QAAMK,SAAS,GAAGF,YAAY,CAACG,IAAb,CAAkBC,KAAlB,CAAwB,GAAxB,CAAlB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,SAAzB;AAEA,MAAIG,MAAM,GAAG,KAAb;;AAEA,OAAK,MAAMC,QAAX,IAAuBV,SAAvB,EAAkC;AAChC,QAAIM,SAAS,CAACK,QAAV,CAAmBD,QAAnB,CAAJ,EAAkC;AAChCD,MAAAA,MAAM,GAAG,IAAT;AACA;AACD;AACF;;AAEDP,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBM,MAAtB;AAEA,SAAOA,MAAP;AACD,CAxBD;;AA0BAd,WAAW,CAACiB,QAAZ,GAAuB,MAAMf,YAAY,CAACC,OAAb,CAAqB,UAArB,CAA7B;;AAEAH,WAAW,CAACkB,KAAZ,GAAoB,aAA+BC,QAA/B,KAA4C;AAAA,MAArC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAqC;AAC9D,QAAMC,KAAK,GAAG;AACZF,IAAAA,QADY;AAEZC,IAAAA,QAFY;AAGZE,IAAAA,SAAS,EAAE;AAHC,GAAd;;AAMA,MAAI;AACF,QAAIC,QAAQ,GAAG,MAAM1B,eAAe,CAAC2B,IAAhB,CACnB,oCADmB,EAEnBH,KAFmB,CAArB;AAKAf,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BgB,QAA9B;;AAEA,QAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,YAAMC,aAAa,GAAG;AACpBrB,QAAAA,WAAW,EAAEkB,QAAQ,CAACI,IAAT,CAActB,WADP;AAEpBuB,QAAAA,YAAY,EAAEL,QAAQ,CAACI,IAAT,CAAcC;AAFR,OAAtB,CAD0B,CAM1B;;AACA9B,MAAAA,YAAY,CAAC+B,QAAb,CAAsBH,aAAtB;AAEAR,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,GAAG,EAAE;AAAP,OAAD,EAAe,IAAf,CAAR;AACD,KAVD,MAUO,IAAIP,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;AACjCP,MAAAA,QAAQ,CAAC,IAAD,EAAO;AAAEa,QAAAA,OAAO,EAAE;AAAX,OAAP,CAAR;AACD;AACF,GArBD,CAqBE,OAAOC,KAAP,EAAc;AACdd,IAAAA,QAAQ,CAAC,IAAD,EAAO;AAAEa,MAAAA,OAAO,EAAE;AAAX,KAAP,CAAR;AACAzB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2ByB,KAA3B;AACD;AACF,CAhCD,C,CAkCA;;;AACAjC,WAAW,CAACkC,MAAZ,GAAsBf,QAAD,IAAc;AACjCpB,EAAAA,YAAY,CAACoC,UAAb,GADiC,CACN;;AAC3BhB,EAAAA,QAAQ,CAAC;AAAEY,IAAAA,GAAG,EAAE;AAAP,GAAD,CAAR,CAFiC,CAEJ;AAC9B,CAHD","sourcesContent":["import { BaseHttpService } from \"./base.httpservice\";\r\nimport { TokenService } from \"./token.service\";\r\n\r\nexport const AuthService = {};\r\n\r\nAuthService.isAuthenticated = () => {\r\n  return localStorage.getItem(\"access_token\") ? true : false;\r\n};\r\n\r\n// Kullanıcının böyle bir rolü var mı yok mu kontrolü yaptık\r\nAuthService.IsInRole = (roleNames) => {\r\n  const accessToken = localStorage.getItem(\"access_token\");\r\n\r\n  console.log(\"roleNames\", roleNames);\r\n\r\n  // sample roles ['admin','manager']\r\n  // accesstokendan role bilgisini çektik\r\n  var decodedToken = TokenService.DecodeAccessToken(accessToken);\r\n  // accessToken'dan decode edilen role\r\n  const userRoles = decodedToken.role.split(\",\");\r\n  console.log(\"userRoles\", userRoles);\r\n\r\n  let result = false;\r\n\r\n  for (const roleName of roleNames) {\r\n    if (userRoles.includes(roleName)) {\r\n      result = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  console.log(\"result\", result);\r\n\r\n  return result;\r\n};\r\n\r\nAuthService.UserName = () => localStorage.getItem(\"username\");\r\n\r\nAuthService.login = async ({ username, password }, callback) => {\r\n  const param = {\r\n    username,\r\n    password,\r\n    grantType: \"password\",\r\n  };\r\n\r\n  try {\r\n    let response = await BaseHttpService.post(\r\n      \"https://localhost:44381/api/tokens\",\r\n      param\r\n    );\r\n\r\n    console.log(\"response324234\", response);\r\n\r\n    if (response.status == 200) {\r\n      const tokenResponse = {\r\n        accessToken: response.data.accessToken,\r\n        refreshToken: response.data.refreshToken,\r\n      };\r\n\r\n      // decode işlemi ve localStorage Set işlemleri yaparız\r\n      TokenService.setToken(tokenResponse);\r\n\r\n      callback({ url: \"/\" }, null);\r\n    } else if (response.status == 401) {\r\n      callback(null, { message: \"Kullanıcı adı veya parola hatalı\" });\r\n    }\r\n  } catch (error) {\r\n    callback(null, { message: \"Sunucuda bir hata oluştu\" });\r\n    console.log(\"login Error\", error);\r\n  }\r\n};\r\n\r\n// js tarafında apiden herhangi bir işlem yapmadığımız için sadece tokenları sildiğimiz için senkron tanımladık.\r\nAuthService.logout = (callback) => {\r\n  TokenService.clearToken(); // token sil\r\n  callback({ url: \"/login\" }); // login sayfasına yönlendir\r\n};\r\n"]},"metadata":{},"sourceType":"module"}